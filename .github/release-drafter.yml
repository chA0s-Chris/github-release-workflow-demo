# .github/release-drafter.yml

# 1) Release name & tag
#    Use the resolved version (based on merged-PR labels) for both the draft name and tag.
name-template: 'v$RESOLVED_VERSION'
tag-template:  'v$RESOLVED_VERSION'

# 2) Which branches to draft on (default is the repo default)
branches:
  - main

# 3) How to format each PR line in the draft
#    $TITLE    → PR title
#    $NUMBER   → PR number
#    $AUTHOR   → PR author
change-template: '- $TITLE (#$NUMBER) by @$AUTHOR'

# 4) Prevent HTML/markdown in $TITLE from rendering
#    escapes <, *, _, & so you see literal characters
change-title-escapes: '\\<*_&'

# 5) Fallback if no PRs have been merged since the last tag
no-changes-template: '- No changes since last release'

# 6) Categories & labels
#    PRs get grouped under these headings if they carry one of the listed labels.
categories:
  - title: '🚀 Features'
    labels:
      - enhancement
      - feature
  - title: '🐛 Bug Fixes'
    labels:
      - bug
      - fix
  - title: '⚡ Performance Improvements'
    labels:
      - perf
  - title: '♻️ Refactoring'
    labels:
      - refactor
  - title: '🧪 Tests'
    labels:
      - test
  - title: '📚 Documentation'
    labels:
      - docs
  - title: '🛠 Maintenance'
    labels:
      - chore
      - ci
      - build
  - title: '🔄 Reverts'
    labels:
      - revert

# 7) Version bump rules
#    If any PR has the matching label, bump that part.
version-resolver:
  major:
    labels:
      - major
  minor:
    labels:
      - minor
  patch:
    labels:
      - patch
  default: patch

# 8) The overall draft template
#    $CHANGES will be replaced with the above grouped entries.
template: |
  ## What’s Changed

  $CHANGES

  _This draft was generated by [Release Drafter](https://github.com/release-drafter/release-drafter)_  
